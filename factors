#!/usr/bin/python3
from random import randint

# A function to find the greatest common divisor of two numbers
def gcd(a, b):
    while b:
        a, b = b, a % b
    return a

# A helper function that uses the Pollard-Brent algorithm to find a factor of a number
def _pollard_brent(c, n, x):
    y = (x ** 2) % n + c
    if y >= n:
        y -= n

    assert 0 <= y < n
    return y

# A function to factorise a number using the Pollard-Brent algorithm
def factorise_b(n, iterations=None):
    y, c, m = (randint(1, n - 1) for w in range(3))
    r, q, g = 1, 1, 1
    i = 0
    while g == 1:
        x = y
        for w in range(r):
            y = _pollard_brent(c, n, y)
        k = 0
        while k < r and g == 1:
            ys = y
            for _ in range(min(m, r - k)):
                y = _pollard_brent(c, n, y)
                q = (q * abs(x - y)) %  n
            g = gcd(q, n)
            k += m
        r *= 2
        if iterations:
            i += 1
            if i == iterations:
                return None

    if g == n:
        while True:
            ys = _pollard_brent(c, n, ys)
            g = gcd(abs(x - ys), n)
            if g > 1:
                break
    return g

# Main function
if __name__ == '__main__':
    from sys import argv

    if len(argv) != 2:
        exit(1)

    with open(argv[1], "r") as f:
        for i in f:
            n = int(i[:-1])
            res = factorise_b(n)
            print("{}={}*{}".format(n, n // res, res)) 

